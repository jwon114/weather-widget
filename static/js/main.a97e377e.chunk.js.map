{"version":3,"sources":["utils/api.js","components/Header.js","components/WeatherDetails.js","components/WeatherWidget.js","serviceWorker.js","index.js","images/loading.gif"],"names":["lat","lon","fetch","Header","props","dateTime","Date","datetime","day","toLocaleDateString","weekday","time","toLocaleTimeString","hour","minute","className","location","summary","WeatherDetails","useState","tempUnit","setTempUnit","temperature","tempValue","setTempValue","handleUnitClick","src","icon","alt","Math","floor","onClick","precipitation","humidity","windSpeed","WeatherApp","state","currently","dataLoad","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","API","then","result","json","data","setState","catch","console","log","this","name","dt","weather","description","main","temp","rain","wind","speed","loading","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.a97e377e.chunk.js","sourcesContent":["const API_KEY = '6c8ca7a74ad9d3301728396fc82b6227';\n\nexport default {\n  fetchWeatherData: (lat, lon) => (\n    fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`)\n  )\n};","import React from 'react';\n\nconst Header = (props) => {\n  // parse datetime value in milliseconds to date object in seconds\n  const dateTime = new Date(props.datetime * 1000);\n  const day = dateTime.toLocaleDateString('en', { weekday: 'long' });\n  const time = dateTime.toLocaleTimeString('en', { hour: '2-digit', minute:'2-digit' });\n\n  return (\n    <div className=\"header__container\">\n      <div className=\"header__location\">{props.location}</div>\n      <div className=\"header__time\">{day} {time}</div>\n      <div className=\"header__summary\">{props.summary}</div>\n    </div>\n  )\n}\n\nexport default Header;","import React, { useState } from 'react';\n\nconst WeatherDetails = (props) => {\n  let [tempUnit, setTempUnit] = useState('C');\n  let [tempValue, setTempValue] = useState(props.temperature);\n\n  const handleUnitClick = () => {\n    if (tempUnit === 'C') {\n      setTempValue(tempValue * 1.8 + 32);\n      setTempUnit('F');\n    } else if (tempUnit === 'F') {\n      setTempValue((tempValue - 32) / 1.8);\n      setTempUnit('C');\n    }\n  }\n  \n  return (\n    <div className=\"weatherDetails__main\">\n      <div className=\"weatherDetails__left_container\">\n        <div className=\"weatherDetails__icon\">\n          <img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt=\"weather forecast icon\"/>\n        </div>\n        <div className=\"weatherDetails__temperature_container\">\n          <span className=\"weatherDetails__temperature\">{Math.floor(tempValue)}</span>\n          <div className={`weatherDetails__unit_click ${tempUnit === 'C' ? 'active' : ''}`}>\n            <span \n              className=\"weatherDetails__unit\"\n              onClick={handleUnitClick}>&deg;C\n            </span>\n          </div>\n          <span className=\"weatherDetails__vert_separator\">|</span>  \n          <div className={`weatherDetails__unit_click ${tempUnit === 'F' ? 'active' : ''}`}>\n            <span \n              className=\"weatherDetails__unit\" \n              onClick={handleUnitClick}>&deg;F\n            </span>\n          </div>\n        </div>\n      </div>\n      <div className=\"weatherDetails__right_container\">\n        <div className=\"weatherDetails__precipitation\">Precipitation: {props.precipitation}mm</div>\n        <div className=\"weatherDetails__humidity\">Humidity: {props.humidity}%</div>\n        <div className=\"weatherDetails__wind\">Wind: {Math.floor(props.windSpeed * 3.6)} km/h</div>\n        <div className=\"weatherDetails__conditions\">\n          <button className=\"weatherDetails__conditions_button\">Temperature</button>  \n          <button className=\"weatherDetails__conditions_button\">Precipitation</button>\n          <button className=\"weatherDetails__conditions_button\">Wind</button>\n        </div> \n      </div>\n    </div>\n  );\n}\n\nexport default WeatherDetails;","import React, { Component } from 'react';\nimport API from '../utils/api';\nimport Header from './Header';\nimport WeatherDetails from './WeatherDetails';\nimport loading from '../images/loading.gif';\n\nexport default class WeatherApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currently: {},\n      dataLoad: false,\n    }\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const latitude = position.coords.latitude\n        const longitude = position.coords.longitude\n        API.fetchWeatherData(latitude, longitude)\n          .then(result => result.json())\n          .then(data => {\n            this.setState({\n              currently: data,\n              dataLoad: true,\n            })\n          })\n          .catch(() => {\n            console.log('Something went wrong with fetch');\n          })\n      });\n    } else {\n      console.log('Geolocation is not available in this browser!');\n    }\n  }\n\n  render() {\n    const { currently } = this.state;\n    return (\n      <div className=\"weatherApp__container\">\n        {this.state.dataLoad ? \n        <div>\n          <Header \n            location={currently.name} \n            datetime={currently.dt}\n            summary={currently.weather[0].description}\n          />\n          <WeatherDetails\n            icon={currently.weather[0].icon}\n            temperature={currently.main.temp}\n            precipitation={currently.rain || 0}\n            humidity={currently.main.humidity}\n            windSpeed={currently.wind.speed}\n          />\n        </div>\n        : \n        <div className=\"weatherApp__loading\">\n          <img src={loading} alt=\"loading_spinner\"/>\n        </div>}\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport WeatherWidget from './components/WeatherWidget';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherWidget />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.f5c44a27.gif\";"],"sourceRoot":""}